{
  "name": "electron-prebuilt",
  "version": "0.30.1",
  "description": "Install electron (formerly called atom-shell) prebuilts using npm",
  "repository": {
    "type": "git",
    "url": "https://github.com/mafintosh/electron-prebuilt"
  },
  "scripts": {
    "cache-clean": "rm -rf ~/.electron && rm -rf dist",
    "postinstall": "node install.js",
    "pretest": "npm run cache-clean && node install.js",
    "test": "tape test/*.js"
  },
  "bin": {
    "electron": "cli.js"
  },
  "main": "index.js",
  "dependencies": {
    "extract-zip": "^1.0.3",
    "electron-download": "^1.0.0"
  },
  "devDependencies": {
    "home-path": "^0.1.1",
    "path-exists": "^1.0.0",
    "tape": "^3.0.1"
  },
  "author": {
    "name": "Mathias Buus"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/mafintosh/electron-prebuilt/issues"
  },
  "homepage": "https://github.com/mafintosh/electron-prebuilt",
  "readme": "# electron-prebuilt\n\n[![build status](http://img.shields.io/travis/mafintosh/electron-prebuilt.svg?style=flat)](http://travis-ci.org/mafintosh/electron-prebuilt)\n\nInstall [electron](https://github.com/atom/electron) (formerly called **atom-shell**) prebuilt binaries for command-line use using npm.\n\nWorks on Mac, Windows and Linux OSes that Electron supports (e.g. Electron [does not support Windows XP](https://github.com/atom/electron/issues/691)).\n\nElectron is a javascript runtime that bundles Node.js and Chromium. You use it similar to the `node` command on the command line for executing javascript programs. This module helps you easily install the `electron` command for use on the command line without having to compile anything.\n\n## Installation\n\nDownload and install the latest build of electron for your OS and add it to your projects `package.json` as a `devDependency`:\n\n```\nnpm install electron-prebuilt --save-dev\n```\n\nThis is the preferred way to use electron, as it doesn't require users to install electron globally.\n\nYou can also use the `-g` flag (global) to symlink it into your PATH:\n\n```\nnpm install -g electron-prebuilt\n```\n\nIf that command fails with an `EACCESS` error you may have to run it again with `sudo`:\n\n```\nsudo npm install -g electron-prebuilt\n```\n\nNow you can just run `electron` to run electron:\n\n```\nelectron\n```\n\nIf you need to use an HTTP proxy you can [set these environment variables](https://github.com/request/request/tree/f0c4ec061141051988d1216c24936ad2e7d5c45d#controlling-proxy-behaviour-using-environment-variables)\n\n## Usage\n\nFirst you have to [write an electron application](https://github.com/atom/electron/blob/master/docs/tutorial/quick-start.md)\n\nThen you can run your app using:\n\n```\nelectron your-app/\n```\n\n## Programmatic usage\n\nIf you require `electron-prebuilt` inside your node app it will return the file path to the binary.\nUse this to spawn electron\n\n``` js\nvar electron = require('electron-prebuilt')\nvar proc = require('child_process')\n\n// will something similar to print /Users/maf/.../Electron\nconsole.log(electron)\n\n// spawn electron\nvar child = proc.spawn(electron)\n```\n",
  "readmeFilename": "README.md",
  "_id": "electron-prebuilt@0.30.1",
  "_shasum": "6b0cec766180f5808e7cc2bc8c55754578b1221a",
  "_from": "electron-prebuilt@",
  "_resolved": "https://registry.npmjs.org/electron-prebuilt/-/electron-prebuilt-0.30.1.tgz"
}
